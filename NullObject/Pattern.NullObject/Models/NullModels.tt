<#@ template debug="false" hostspecific="true" language="C#" compilerOptions="/langversion:6" #>
<#@output extension=".txt"#>
<#@ include file="NullObject.Core.ttinclude" #>
<#@ include file="NullObject.Reader.ttinclude" #>
<#@ include file="NullObject.RuntimeCompilator.ttinclude" #>
<#@ include file="NullObject.DefaultValues.ttinclude" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Runtime.Remoting.Messaging"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Collections.Generic"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
	// Configuration of dependencies libraries	
	// Settings.SolutionPath = this.Host.ResolvePath(@"..\..\");
	// Settings.Assemblies.Add(@"\packages\Microsoft.Rest.ClientRuntime.2.3.14\lib\net452\Microsoft.Rest.ClientRuntime.dll");
	
	var currentPath = this.Host.ResolvePath(string.Empty);
	var classGenerator = new ClassGenerator(currentPath);
	var files = classGenerator.Run();
	foreach(FileItem fileItem in files)
	{
		manager.StartNewFile(fileItem.Name); 
		#><#=fileItem.Content#><#
		manager.EndBlock();
	}
	
	manager.Process(true);
#>
<#+
public class FileItem
{
	public string Name { get; set; }
	
	public string Content { get; set; }
}

public class ClassGenerator
{
	private readonly string rootPath;

	public ClassGenerator(string rootPath)
	{
		this.rootPath = rootPath;
	}

	public IEnumerable<FileItem> Run()
	{
		var nullClassTemplating = new NullClassTemplating();		
		var runtimeCompilator = new RuntimeCompilator();
		var reader = new Reader(this.rootPath);
		var sources = reader.Read();
		
		var files = new List<FileItem>();
		foreach(Type type in runtimeCompilator.Compile(sources))
		{
			var classPath = this.rootPath + "\\" + type.Name + ".cs";
			var fileContent = File.ReadAllText(classPath);
			if(fileContent.Contains("Valuable<Null") || fileContent.Contains("class Null"))
			{
				continue;
			}
			
            if(!type.GetTypeInfo().IsAbstract)
            {
                var extendOriginalClass = new ExtendOriginalClass(type.Name, fileContent);
                var content = extendOriginalClass.TransformText();
                files.Add(new FileItem{
                        Name = "NullModels." + type.Name + "Extend.cs",
                        Content = content
                        });
                nullClassTemplating.Class = type;
                content = nullClassTemplating.TransformText();
                files.Add(new FileItem{
                        Name = "NullModels.Null" + type.Name + ".cs",
                        Content = content
                        });
            }

			var reWriteOriginalClass = new ReWriteOriginalClass(type.Name, fileContent);
			reWriteOriginalClass.RenderToFile(this.rootPath + "\\" + type.Name + ".cs");
		}

		return files;
	}
}

public class ExtendOriginalClass
{
	private readonly string content = string.Empty;
	private readonly string className = string.Empty;

	public ExtendOriginalClass(string className, string content)
	{
		this.className = className;
		this.content = content;
	}

	public string TransformText()
    {
		var fileContent = new StringBuilder();
		string @namespace = CallContext.LogicalGetData("NamespaceHint").ToString();

		var content = new StringBuilder();
		content.AppendLine("// <auto-generated/>");
		content.Append("namespace ");
		content.AppendLine(@namespace);
		content.AppendLine("{");
		content.AppendLine("\tpublic partial class " + this.className + " : IValuable<Null" + this.className +">");
		content.AppendLine("\t{");
		content.AppendLine("\t\tpublic static Null" + this.className + " Null { get; } = new Null" + this.className + "();");
		content.AppendLine();
		content.AppendLine("\t\tpublic virtual bool IsNull => false;");
		content.AppendLine("\t}");
		content.Append("}");
	
        return content.ToString();
	}
}

public class ReWriteOriginalClass
{
	private readonly string content = string.Empty;
	private readonly string className = string.Empty;

	public ReWriteOriginalClass(string className, string content)
	{
		this.className = className;
		this.content = content;
	}

	public void RenderToFile(string fileName)
    {
		var partialKeyWord = "partial ";
		if(this.content.Contains(partialKeyWord))
		{
			partialKeyWord = string.Empty;
		}

		var fileContent = this.content.Replace("class " + this.className, partialKeyWord + "class " + this.className);

		MatchCollection matches = Regex.Matches(fileContent, @"public ((virtual .*)|(.*)) { get; set; }");
		foreach(Match match in matches)
		{
			if(match.Success)
			{
				var groupValue = match.Groups[1].Value;
				if(!groupValue.Contains("virtual "))
				{
					fileContent = fileContent.Replace(groupValue,  "virtual " + groupValue);
				}
			}
		}
		
        File.WriteAllText(fileName, fileContent);
	}
}

public class NullClassTemplating
{
	public Type Class { get; set; }

	private string Name => "Null" + this.Class.Name;
	
	public string TransformText()
    {
		var properties = this.Class.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.GetProperty);
		string @namespace = CallContext.LogicalGetData("NamespaceHint").ToString();

		var content = new StringBuilder();
		content.AppendLine("// <auto-generated/>");
		content.Append("namespace ");
		content.AppendLine(@namespace);
		content.AppendLine("{");
		content.Append("\tpublic sealed partial class ");
		content.Append(this.Name);
		content.Append(" : ");
		content.AppendLine(this.Class.Name);
		content.AppendLine("\t{");
		content.AppendLine("\t\tpublic override bool IsNull => true;");
		foreach(var property in properties)
		{
			content.AppendLine();
			var type = property.PropertyType;
			var defaultValue = DefaultValues.Get(type);
			var fullName = type.FullName;
			var isNullable = DefaultValues.IsNullable(type);
			if(isNullable)
			{
				fullName = type.GetGenericArguments()[0].FullName + "?";
			} else if(!DefaultValues.IsString(type) && DefaultValues.IsEnumerable(type))
			{
				var typeOfItem = type.GetElementType()?.FullName ?? type.GenericTypeArguments[0].FullName;
				if(!type.IsArray)
				{
					fullName = fullName.Remove(fullName.IndexOf('`')) + "<" + typeOfItem + ">";
				}
			}
			
			content.Append("\t\tpublic override ");
			content.AppendLine(fullName + " " + property.Name + " => " + defaultValue + ";");
		}
		
		content.AppendLine("\t}");
		
		content.AppendLine("}");
		return content.ToString();
	}
}
#>